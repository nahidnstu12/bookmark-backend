openapi: 3.0.0
info:
  version: "1.0.0"
  title: "Bookstore API"
  description: "This is bookstore api documentation."
  contact:
    name: Bookstore Team
    url: https://github.com/nahidnstu12/bookmark-backend
    email: nahid.dev19@gmail.com
servers:
  - description: Dev
    url: "http://localhost:6050/api/v1"
tags:
  - name: Test API
    description: Testing Route
  - name: Auth
    description: Authentication Endpoints (public)
  - name: Book
    description: Book Endpoints (public + private)
  - name: User
    description: User Endpoints (admin only)
paths:
  /health:
    get:
      summary: Get the root endpoint
      tags: [Test API]
      responses:
        '200':
          description: Successful response

  "/auth/register":
    post:
      description: create a new account
      tags: [ Auth ]
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Abdullah Alamin
                email:
                  type: string
                  format: email
                  example: alamin@example.com
                password:
                  type: string
                  format: password
                  example: PassWord123
              required: [ name, email, password ]
      responses:
        "201":
          description: Signup successul
          content:
            "application/json":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 201
                  message:
                    type: string
                    example: Signup successful
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: "/auth/signup"
                      signin:
                        type: string
                        example: "/auth/signin"
        "400":
          $ref: "#/components/responses/400"
        "500":
          "$ref": "#/components/responses/500"

  "/auth/login":
    post:
      description: Login to your account
      tags: [ Auth ]
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: alamin@example.com
                password:
                  type: string
                  format: password
                  example: PassWord123
              required: [ email, password ]
      responses:
        "200":
          description: Login successful
          content:
            "application/json":
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Login successful
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: "/auth/signin"
        "400":
          $ref: "#/components/responses/400"
        "500":
          "$ref": "#/components/responses/500"

  "/books":
    get:
      tags: [ Book ]
      description: Retrieve all published Books

      responses:
        "200":
          description: Return a list of books
          content:
            "application/json":
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            id:
                              type: integer
                              format: int32
                              example: 1b9af82d-38cc-4191-8d9e-a1b9d7ca8f23
                            name:
                              type: string
                              example: Book name
                            published_year:
                              type: string
                              format: date
                              example: 2023-03-01 19:53:18
                            book_status:
                              type: number
                              format: number
                              example: 1
                            description:
                              type: string
                              format: text
                              example: New ABC 13 9370, 13.3, 5th Gen CoreA5-8250U, 8GB RAM, 256GB SSD,
                            best_selling:
                              type: number
                              format: number
                              example: 1

                          required: [ id, name, description, published_year ]
                        - $ref: "#/components/schemas/Timestamp"

        "400":
          $ref: "#/components/responses/400"
        "500":
          "$ref": "#/components/responses/500"
    post:
      operationId: createBook
      security:
        - bearerAuth: [ ]
      tags: [ Book ]
      description: Create a new Book
      requestBody:
        description: To create a new book user must need to provide valid data
        content:
          "application/json":
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Book name
                published_year:
                  type: string
                  format: date
                  example: 2023-03-01 19:53:18
                book_status:
                  type: number
                  enum: [ 1, 2, 3, 4 ]
                  example: 1
                description:
                  type: string
                  format: text
                  example: New ABC 13 9370, 13.3, 5th Gen CoreA5-8250U, 8GB RAM, 256GB SSD,
                best_selling:
                  type: number
                  format: number
                  example: 1
                
              required: [ name, description, published_year ]
      responses:
        "201":
          description: Successfully created a new book
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/BookCreateDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "500":
          $ref: "#/components/responses/500"

  "/books/{id}":
    get:
      tags: [ Book ]
      description: Fetch a single book
      parameters:
        - $ref: "#/components/parameters/idPathParam"
        - in: query
          name: expand
          description: expand author and comment object
          schema:
            type: string
            example: "author,comment"
      responses:
        "200":
          description: "Single Book view"
          content:
            "application/json":
              schema:
                type: object
                properties:
                  data:
                    allOf:
                      - $ref: "#/components/schemas/Book"
                      - type: object
                        properties:
                          author:
                            $ref: "#/components/schemas/AuthorDTO"
                      - type: object
                        properties:
                          comments:
                            type: array
                            items:
                              $ref: "#/components/schemas/Comment"
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: "/articles/1"
                      author:
                        type: string
                        example: "/articles/1/author"
                      comments:
                        type: string
                        example: "/articles/1/comments"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
    put:
      security:
        - bearerAuth: [ ]
      tags: [ Book ]
      description: Create or update entire book
      parameters:
        - $ref: "#/components/parameters/idPathParam"
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                id:
                  type: integer
                  format: int32
                  example: 1
                title:
                  type: string
                  example: article title
                body:
                  type: string
                  format: text
                  example: article body
                cover:
                  type: string
                  format: url
                  example: "https://s3.aws.myblog.com/221ddw34"
                status:
                  type: string
                  enum: [ draft, published ]
                  example: draft
              required: [ title, body ]
      responses:
        "200":
          description: "Successfully Updated"
          content: &article_update_content
            "application/json":
              schema:
                $ref: "#/components/schemas/ArticleUpdateDTO"
        "201":
          description: "Successfully Created"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/BookCreateDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "500":
          $ref: "#/components/responses/500"
    patch:
      security:
        - bearerAuth: [ ]
      tags: [ Book ]
      description: Partially update an book
      parameters:
        - $ref: "#/components/parameters/idPathParam"
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: article title
                body:
                  type: string
                  format: text
                  example: article body
                cover:
                  type: string
                  format: url
                  example: "https://s3.aws.myblog.com/221ddw34"
                status:
                  type: string
                  enum: [ draft, published ]
                  example: draft
      responses:
        "200":
          description: "Successfully Updated"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/ArticleUpdateDTO"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
    delete:
      security:
        - bearerAuth: [ ]
      tags: [ Book ]
      description: Delete an book by id
      parameters:
        - $ref: "#/components/parameters/idPathParam"
      responses:
        "204":
          description: "Article deleted successfully"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"



components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Book:
      allOf:
        - type: object
          properties:
            id:
              type: integer
              format: int32
              example: 1b9af82d-38cc-4191-8d9e-a1b9d7ca8f23
            name:
              type: string
              example: Book name
            published_year:
                type: string
                format: date
                example: 2023-03-01 19:53:18
            book_status:
                type: number
                enum: [ 1, 2, 3, 4 ]
                example: 1
            description:
                type: string
                format: text
                example: New ABC 13 9370, 13.3, 5th Gen CoreA5-8250U, 8GB RAM, 256GB SSD,
            best_selling:
                type: number
                format: number
                example: 1
              
          required: [  name, description, published_year ]
        - $ref: "#/components/schemas/Timestamp"
    BookCreateDTO:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 201
        message:
          type: string
          example: "Book created successfully"
        data:
          $ref: "#/components/schemas/Book"

    ArticleUpdateDTO:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 200
        message:
          type: string
          example: Book updated successfully
        data:
          $ref: "#/components/schemas/Book"
        links:
          type: object
          properties:
            self:
              type: string
              example: "/articles/1"
    Comment:
      allOf:
        - type: object
          properties:
            id:
              type: integer
              format: int32
              example: 1
            authorId:
              type: integer
              format: int32
              example: 1
            articleId:
              type: integer
              format: int32
              example: 1
            body:
              type: string
              format: text
              example: The body of the comment
            status:
              type: string
              enum: [public, private]
              example: public
          required: [id, authorId, articleId, body, status]
        - $ref: "#/components/schemas/Timestamp"
    Timestamp:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required: [createdAt, updatedAt]
    AuthorDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        name:
          type: string
          example: "A.B Raihan"
      required: [id, name]
    Pagination:
      type: object
      properties:
        page:
          type: integer
          format: int32
          example: 2
        limit:
          type: integer
          format: int32
          example: 10
        next:
          type: integer
          format: int32
          example: 3
        prev:
          type: integer
          format: int32
          example: 1
        totalPage:
          type: integer
          format: int32
          example: 5
        totalItems:
          type: integer
          format: int32
          example: 50
      required:
        - page
        - limit
        - totalPage
        - totalItems
  responses:
    "500":
      description: "Internal Server Error"
      content:
        "application/json":
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 500
              error:
                type: string
                example: Internal Server Error
              message:
                type: string
                example: We are sorry for the inconvenience. Please try again later
    "400":
      description: "Bad Request"
      content:
        "application/json":
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 400
              error:
                type: string
                example: Bad Request
              data:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                      example: email
                    message:
                      type: string
                      example: Invalid email
                    in:
                      type: string
                      enum: [query, body]
                      example: body
    "401":
      description: Unauthorized
      content:
        "application/json":
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 401
              error:
                type: string
                example: Unauthorized
              message:
                type: string
                example: You don't have the right permissions
    "404":
      description: Resource Not Found
      content:
        "application/json":
          schema:
            type: object
            properties:
              code:
                type: integer
                format: int32
                example: 404
              error:
                type: string
                example: Not Found
              message:
                type: string
                example: Requested resource not found
  parameters:
    pageParam:
      in: query
      name: page
      description: current page number
      required: true
      schema:
        type: integer
        format: int32
        example: 2
    limitParam:
      in: query
      name: limit
      description: maximum items to be returned
      required: true
      schema:
        type: integer
        format: int32
        example: 10
    sortTypeParam:
      in: query
      name: sort_type
      description: type of sort (asc or dsc)
      schema:
        type: string
        enum: [asc, dsc]
        example: dsc
    sortByParam:
      in: query
      name: sort_by
      description: Sort key
      schema:
        type: string
        example: updatedAt
    searchParam:
      in: query
      name: search
      description: Search term
      schema:
        type: string
        example: title
    idPathParam:
      in: path
      name: id
      required: true
      description: Article ID
      schema:
        type: string
        example: "64d268cdeef8c84bb18912db"
